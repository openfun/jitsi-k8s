#!/usr/bin/env bash
# This Kustomize exec plugins allows to generate a Secret from a GPG encrypted
# env file (with a symmetric cipher). The passphrase should be available in
# the SECRET_GPG_PASSWORD environment variable during the execution of this
# plugin.
#
# Example usage:
#
# generator.yaml:
# ---------------
#
#  apiVersion: openfun
#  kind: GpgSecretGenerator
#  metadata:
#    name: your-secret-name
#  argsOneLiner: ./my-file.env.gpg


set -eo pipefail

if [[ "$#" -lt 2 ]]; then
  cat >&2 <<EOF
    ERROR: You must specify the path to the encrypted env file as an argument
    Example usage:

    apiVersion: openfun
    kind: GpgSecretGenerator
    metadata:
      name: your-secret-name
    argsOneLiner: ./my-file.env.gpg

EOF
  exit 22
fi

# The first argument is always the path to the YAML configuration file
# that called this generator
declare -r plugin_conf=$1
declare -r encrypted_env_file=$2

# Extract the secret name from the YAML configuration
secret_name=$(yq e .metadata.name "${plugin_conf}")

if [[ ! -f "${encrypted_env_file}" ]]; then
  echo "ERROR: Unable to find file ${encrypted_env_file}" >&2
  exit 2
fi

if [[ -z "${SECRET_GPG_PASSWORD}" ]]; then
  echo "You must provide the passphrase to decrypt your env file in the SECRET_GPG_PASSWORD environment variable" >&2
  exit 22
fi

# Decrypt the input file
gpg -q -d --batch --passphrase="${SECRET_GPG_PASSWORD}" "${encrypted_env_file}" | \

# Create a Secret from the decrypted env file with kubectl
kubectl create secret generic "${secret_name}" --from-env-file=/dev/stdin -o yaml --dry-run=client |

# Remove the null creationTimestamp metadata added by kubectl
yq eval 'del(.metadata.creationTimestamp)' - |

# Add an annotation tell kustomize to adopt the merge behavior if a secret with
# the same name has been defined in a parent layer
yq eval '.metadata.annotations."kustomize.config.k8s.io/behavior"="merge"' -
